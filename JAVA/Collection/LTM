1. 상속

### 자식 클래스가 부모 클래스를 상속받는다.

즉, 부모 클래스에 선언되어 있는 public 및 protected로 선언되어 있는 모든 변수와 메소드를 자기꺼인 마냥 사용 가능

### this()

현재 클래스에 정의된 생성자를 부를 때 사용

```java
public class ParentClass{
	private Stirng mother;
	private String father;

	public ParentClass(){
		this("mother", "father");
	}

	public ParentClass(String mother, String father){
		this.mother = mother;
		this.father = father;
	}
}
```

```java
public class ParentClass{
	private Stirng mother;
	private String father;

	public ParentClass(){
		this("mother", "father");
	}

	public ParentClass(String mother, String father){
		this.mother = mother;
		this.father = father;
	}
}
```

위 코드를 보면 ParentClass의 생성자가 2개 있는데, 생성자 값이 들어오지 않는다면, this()메소드를 사용하여 두번째 생성자를 불러서 초기화 할 수 있게 하기 위해서 this()를 사용한다.

### super()

- 부모 클래스

```java
public class ParentArg{
			public ParentArg(String name){
				System.out.println("Constructor("+ name+ ") of ParentArg class");
			}

			public ParentArg(InheritancePrint obj){
			System.out.println("Constructor(InheritancePrint) of ParentArg class");
			}

			public void printName(){
			System.out.println("printName() of ParentArg class");
			}
}
```

- 자식 클래스

```java
publicclass ChildArg extends ParentArg{
		public ChildArg(){
			super("teemo");
			System.out.println("Default Constructor of ChildArg class");
	}
}
```

자식 클래스의 객체가 생성될 때, 자동으로 부모 클래스의 생성자가 실행되는데, 부모 클래스에 생성자가 매개변수를 받는다면, super()를 써서 부모 클래스의 생성자에 매개변수를 넘겨줄 수 있다.

### 기본생성자

클래스에 아무런 생성자를 만들지 않았을 때, 자동으로 생성되는 생성자

```java
public class User {
  Long id;
  String name;
}
```

```java
User() {

}
```

이런식으로 아무런 생성자를 만들지 않을 때 자동으로 생성되는 생성자!

- 기본 생성자 없애기

    : 다른 사용자 정의 생성자를 만드는 것.


+ 추가적으로 나중에 공부해볼 내용

## 기본 생성자가 갖는 의미?

***'음? 그래서 저게 뭐가 중요한건데?'*** 라는 생각이 들 수 있다.

기본 생성자가 갖는 진정한 의미는 **자바 리플렉션**에 있다.

**자바 리플렉션의 용도는 간단히 말하자면 런타임에 해당 클래스의 정보를 알아내는 역할**이다.

리플렉션을 이용하면 구체적인 클래스 타입을 알지 못해도 해당 클래스의 정보를 알 수 있다. 자바 리플렉션은 다른 언어에서는 본 적 없는 기능인데, 로딩이 완료된 클래스에서 다른 클래스를 동적으로 로딩하여 생성자, 멤버 필드, 멤버 메서드 등을 사용할 수 있게 만든다.

근데 그러면 ***'기본 생성자 말고 다른 생성자를 쓰면 되는 거 아냐?'*** 라고 생각이 들 수 있다.

그러나 **리플렉션도 가져올 수 없는 정보가 있는데, 그게 바로 생성자의 인자 정보들이다.** 그래서 기본(빈) 생성자 없이 파라미터가 있는 생성자만 존재한다면, 자바 리플렉션이 객체를 생성할 수가 없다.




2. 오버로딩 VS 오버라이딩

## ✅ 오버로딩

- 다른 메소드를 중복으로 선언하는 것을 의미

## ✅ 오버라이딩

- 부모 클래스의 메소드의 동작 방법을 변경(재정의) 하여 우선적으로 사용하는 것

## 오버로딩

- 오버로딩은 같은 메소드라도 매개변수만 다르면 얼마든지 정의하고 사용할 수 있음
1. 메소드 이름이 같아야 한다.
2. 리턴형이 같아도 되고 달라도 된다.
3. 파라미터 개수가 달라야 한다.
4. 파라미터 개수가 같을 경우 데이터타입이 달라야 한다.

```java
public class OverloadingTest{
	void test(){
		System.out.println("매개변수 없음");
}

	void test(int a, int b){
		System.out.println("a,b");
}

	void test(double d){
		System.out.println("d");
}

}
```

이런게 오버로딩

## 오버라이딩

- 상속 관계에 있는 클래스 간에 같은 이름의 메소드를 정의하는 기술이다.
- 만약 자식클래스가 부모클래스에서 선언된 것ㅇ과 같은 메소드를 가질 때, 메소드 오버라이딩이라고 한다.
1. 오버라이드 하고자 하는 메소드가 상위 클래스에 존재해야 한다.
2. 메소드 이름이 같아야 한다.
3. 메소드 파라미터 개수, 파라미터의 자료형이 같아야 한다.
4. 메소드 리턴형이 같아야 한다.
5. 상위 메소드와 동일하거나 내용이 추가되어야 한다.

```java
public class People{
	public String name;
	public int age;

	public void print(){
	System.out.println(this.name, this.age);
}

}
```

```java
public class Student extends People{
	String job;

	public void print(){
		System.out.println(this.name, this.age);
		System.out.println("추가된 내용");
}
}
```

이런식으로 하는 이유는 하나의 코드로 여러 객체를 처리할 수 있다는 장점이 있음.

예를 들면 A를 상속받은 클래스 B,C 가 cal() 함수를 재정의하는데 객체를 List에 담아 두었다가 for문을 돌면서 한번에 cal() 기능을 수행하고 싶은데 객체마다 기능이 조금씩 다르다. 그럴 때 상속받아서 재정의한 후 부모 클래스의 함수를 호출하면 객체별로 재정의한 함수를 수행할 수 있는 것.

최종 정리:

오버로딩은 한 클래스 내에 여러 개의 같은 이름의 메소드를 정의하는 것을 말한다. 이렇게 메소드의 이름을 동일하게 만들어 프로그램의 가독성을 증가시킬 수 있다는 장점이 있다.

오버라이딩은 부모로부터 받은 메소드의 로직(내부)을 입맛에 맞게 변경하는 것. 객체지향 언어의 특징인 다형성 중 하나!


3. abstract VS interface

추상 클래스는 클래스 내 ‘추상 메소드’가 하나 이상 포함되거나 abstract로 정의된 경우를 말한다.

인터페이스는 **모든** 메소드가 추상 메소드인 경우를 의미한다.

둘은 존재 목적이 다르다.

1. 추상 클래스
    1. 추상 메소드를 멤버로 가지고 있는 클래스
        1. 추상메소드 : 구현체(메소드 바디) 없이 선언만 되어있는 메소드. 자식 클래스에서 오버라이딩 해야만 사용 가능(abstract)
    2. 추상 클래스를 상속받아서 기능을 이용하고 확장하는 데 존재의 목적
    3. 상속을 통해서 자식 클래스에서 완성하도록 유도하는 클래스
    4. 상속을 위한 클래스이기 때문에 객체를 생성할 수도 없음
2. 인터페이스
    1. 추상클래스가 미완성 설계도먄 인터페이스는 기본 설계도
    2. 함수의 껍데기만 있는데 그 이유가 함수의 **구현을 강제**하기 위해서
    3. 인터페이스도 추상클래스처럼 다른 클래스를 작성하는데 도움을 주는 목적으로 작성하지만, 다중상속(구현)이 가능하다
    4. 메소드 시그너처와 상수 선언(static과 final이 둘 다 선언되는 변수 선언)만을 포함.


인터페이스는 여러 개의 인터페이스를 구현할 수 있다. ← 자바는 다중 상속을 금지시켜 둠 (두 개 이상의 클래스를 상속받는데 그 두 클래스 모두 같은 이름의 메소드를 가지고 있다면 호출시 어떤 클래스의 메소드를 가져오는지에 대한 모호성 때문이라고 함.)

```java
class car implements vehicle, engine

	@Override
	public void drive(){

	}
}
```

위와 같이 여러 개를 상속 받는 것처럼 보이는 것처럼 강제 할 수 있음.

***즉 가장 주요한 것은 인터페이스는 해당 인터페이스를 구현한 객체들에 대해서 동일한 동작을 약속하기 위해 존재한다.***

따라서 추상 클래스와 인터페이스의 차이 및 존재 이유에 대한 답변을 할 때는 외형적인 차이 뿐만 아니라 상속이라는 개념과 다형성이라는 개념을 알고 있는지에 대한 질문이 되기도 한다.

### 자바 8 이후!

자바 8 이전에는 모든 버전을 기준으로 인터페이스의 모든 메서드는 구현체(메서드 바디)를 가지고 있지 않다.

그러나,

자바 8부터, default와 static 메서드는 interface 정의에 구현체를 가지고 있을 수 있다.

<자바 8 이전>

- 인터페이스 안에 run이라는 추상 메서드 생성



- override를 통해서 추상 메서드 구체화






<자바 8 이후>


- 이런식으로 interface안에 default, static method를 interface에 구현 에러 발생 x



default method는 구현체에서 오버라이드해서 수정 가능

static method는 구현체에서 오버라이드 통해서 수정 불가능

java 8 이후로는 default method와 static method를 interface에 작성할 수 있다.

++ interface를 통해서 다중 상속이 가능하게 하지만, 중요한 것은 default method가 존재하는 interface는 다중 상속이 불가능 하다. 단, 구현체에서 오버라이딩해서 재정의 하는 경우는 가능


4. 다형성

## ✅ 다형성 = polymorphism

- 부모 - 자식 상속 관계에 있는 클래스에서 ***상위  클래스가 동일한 메시지로 하위 클래스들을 서로 다르게 동작시키는 객체지향 원리***
- 다형성 활용시, 부모 클래스가 자식 클래스의 동작 방식을 알수 없어도 오버라이딩을 통해 자식 클래스를 접근할 수 있게 한다.

    → 그 이유는? ***동적 바인딩***

    - 동적 바인딩 : 메서드가 실행 시점에서 성격이 결정되는 바인딩을 말하는데, 컴파일 시점에는 부모 클래스도 자신의 멤버 함수밖에 접근할 수 없는데, 실행 시점에서 동적 바인딩이 일어나서 부모클래스가 자식 클래스의 멤버함수를 접근하여 실행 가능

## 1. 다형성 장점

- 유지보수 쉬움
    - 개발자가 여러 객체를 하나의 타입으로 관리가 가능하기 때문에, 코드 관리가 편리해 유지보수 용이
- 재사용성 증가
    - 객체를 재사용하기 쉬워지기 때문에, 개발자의 코드 재사용성 증가
- 느슨한 결합
    - 다형성 활용시 클래스간의 의존성이 줄어들며 확장성이 높고 결합도가 낮아져 안전성이 높아진다.

## 2. 다형성 필수 조건

- 상속 관계
    - 다형성을 활용하기 위해서, 필수로 부모-자식 간 클래스 상속이 이루어져야 한다.
- 오버라이딩 필수(자식 클래스에서 메소드 재정의)
    - 다형성이 보장되기 위해서는 하위 클래스 메소드가 반드시 재정의 되어 있어야 한다.
- 업캐스팅(자식 클래스의 객체가 부모 클래스 타입으로 형변환 되는 것)
    - 부모 타입으로 자식 클래스를 업캐스팅하여 객체 생성 필요

## 3. 다형성 구현 방법

- 상속 클래스 구현(부모 - 자식 클래스 구현)
- 메소드 오버라이딩
- 업캐스팅하여 객체 선언
- 부모 클래스 객체로 자식 메소드 호출

## 4. 다형성 예시

- 상속 클래스 구현(부모 - 자식 클래스 구현)
    - 부모 자식 간의 상속 클래스 구현
    - 부모 클래스는 Book 클래스이며, 자식 클래스는 Novel, SF 클래스 입니다.
    - 디폴트 생성자 외 인수 있는 생성자를 추가해 생성자를 중복 정의

    ```java
    package polymorphism;

    class Book {
        public String name;
    public String publisher;
    Book(){ // default 생성자
            this.name = "";
    this.publisher = "";
    }
        Book(String name,String publisher){
            this.name = name;
    this.publisher = publisher;
    }

        void print(){
            System.out.println("print : Book");
    }

        public static void main(String[] args) {
            //업캐스팅
            Book b = new Novel("메타버스 소설","출판사(IT)");
    b.print();
    Book c = new SF("메타버스","SF출판사");
    c.print();
    }
    }

    ```

    ```java
    package polymorphism;

    class Novel extends Book{
        public String name;
    public String publisher;
    Novel(String name,String publisher){
            super(name,publisher);
    }

        @Override
        void print(){
            System.out.println("print : Novel");
    }
    }

    ```

    ```java
    package polymorphism;

    class SF extends Book {
        public String name;
    		public String publisher;

    		SF(String name,String publisher){
            super(name,publisher);
    		}

        @Override
        void print(){
            System.out.println("print : SF");
    		}
    }

    ```
